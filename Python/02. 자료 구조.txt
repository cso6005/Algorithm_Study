1. 리스트 대입
# 변수와 리스트 원소의 개수가 같아야 한다.

a, b, c = [1,2,3] #변수에 정수값 대입.

# 튜플 대입 변수에 선언하면서 대입할 때는 굳이 대괄호 치기 귀찮으니깐 이 방법으로
# 함수 때 리스트 대입을 써야 한다.
d, e, f = 4,5,6

# 딕셔너리 set 대입은 없다.

2. 튜플
리스트 처럼 순서가 있는 자료구조
index (양수, 음수)로 원소를 관리
원소를 변경할 수 없다. (추가, 삭제, 변경이 안된다.)

3. 튜플 연산자
원본을 변경하는 게 아니라 연산 결과를 반환하는 것
이것을 다른 변수에 담으면 됨
t1 * 2
(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)

4. 튜플 정렬
# 튜플은 무조건 리스트로 반환하기에 튜플을 정렬하여 리스트로 반환함.
# sorted 는 원본을 변경하지 않고 그냥 반환하는 함수

t7 = 100, 4, 8, 20, 20, 1, 8

x = sorted(t7)
print(t7)
print(x)

(100, 4, 8, 20, 20, 1, 8)
[1, 4, 8, 8, 20, 20, 100]

5. dictionary, 사전

- 데이터를 key:value 쌍(pair)로 모아서 관리하는 자료구조
- 순서가 있는 list 와 tuple 과 달리 딕셔너리는 키 값으로 조회하기에 넣는 순서 상관없다.
- get 이든 [] 이든 pop 이든 모두 특정 key 를 통해 값을 반환
- 순서가 없으니 당연히 슬라이싱 은 없다.

- 키 는 불변의 값들만 사용 가능 하다.
    - 숫자, 문자열, 튜플

6. 딕셔너리 조회

- print(person1['name'], person2['name']) 
- print(person2.get("name"))


- dictionary.get("key") : 조회. 위 그냥 []로 조회하는 것과 동일한데,
    get함수로 조회할 때 없는 key 값을 조회하면 None.

    이때 None 대신 반환할 기본값을 설정할 수도 있다.
    v=person2.get('email', "없음")
    print(v) # 없음

7. 딕셔너리 in, not in
- value 를 찾는 것이 아니라 key 를 찾는 것이다 !!

8. pop 
딕셔너리의 아이템 즉 쌍을 삭제하면서 반환
뽑아서 다른 변수에 넣고 싶을 때

a = person1.pop('name')
print(a)
print(person1)

박성웅
{'age': 20, 'address': '서울', 'tel': '010-1223-1233'}

9. del 
특정 item (key-값) 삭제 
del person1['age']

10.
person1.items() # dict_items([('age', 20), ('address', '서울')])
person1.keys() # dict_keys(['age', 'address'])
person1.values() # dict_values([20, '서울'])

11. Set 집합
- 중복을 허용하지 않는 자료구조

# set에서 True,1 -> True를 1로 취급 
# False, 0 -> False를 0로 취급
# bool값과 0과 1 같이 있으면 0과 1로 취급하는 것.

# 출력하면 순서가 달라짐. 순서가 없기에. 
# set은 가지고 있는 원소 하나를 조회하는 것은 안된다. => 반복문을 이용해야 함.

12. 
var3 ={} # 빈 dic인가 빈 set인가? -> 빈 dic 이다.
print(type(var3)) # <class 'dict'>

13. 자료구조 변환 함수

- list(자료구조) : 자료구조를 list로 변환하는 함수
- tuple(자료구조) : 자료구조를 Turple로 변환하는 함수
- set(자료구조) : 자료구조를 set으로 변환하는 함수

- dict 로 변환하는 함수는 없다.
    - dict(key=value,key=value) dictionary를 쉽게 만들도록 도와주는 함수
    - dict() 이것은 다른 자료구조를 딕셔너리로 변환하는 함수가 아님. 착각 ㄴㄴ.
    - 그냥 변수를 편하게 넣을 수 있게 하는 함수이다. 위에 배운대로 해도 됨.

- 변경할 대상 자료구조가 dictionary 일 경우에는 key값들만 모아서 리스트, 튜플, 집합으로 반환



14. 문자열 쪼개기 
- 반복문을 돌려 쪼개 변수에 넣는 방법도 있지만
보통 list 에 담아 쪼개기 많이 함
list("안녕하세요") -> ['안', '녕', '하', '세', '요']
tuple("abcdefg")
