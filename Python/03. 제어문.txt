1. range(시작, 종료, 증감) 함수

for _ in range(10):
    print("abc")
- 변수를 _ 로 명명하면 이 변수는 사용하지 않겠다라는 뜻
- 자리만 채운다의 의미로 관례적으로 사용한다.

2. enumerate() 함수

for idx, value in enumerate(lst [, start = 1]):
    print(f"{idx}. {value}")

3. zip() 함수
- 각각의 자료구조에 대해 같은 index의 값들을 묶어서 반환
- 원소의 갯수가 다를 경우 적은 것에 맞춘다.

for name, age, addr in zip(names, ages, address): # 변수 세 개로
    print(name, age, addr)

홍길동 30 서울
이순신 40 인천
강감찬 50 수원


중요 !!!!!!!!!!!!
4. 컴프리헨션
- 주로 기존 자료구조의 원소들을 처리한 결과를 새로우 자료구조에 넣을 때 사용한다.
 새로운 자료구조를 만드는 것이 목적이라는 것을 기억하자.!

리스트 컴프리헨션
딕셔너리 컴프리헨션
set 컴프리헨션
튜플 컴프리헨션


ex 1) 기본
    [ i.upper() for i in lst]

ex 2) 조건에 부답하는 원소만
    [ i.upper() for i in lst if len(i) == 1 ]  

ex 3) if 문 여러 개, and 조건로 동시에 해당하는 원소만
    [i for i in range(10) if i%2==0 if i%4==0]

ex 4) 컴플리헨션 if else => 왼쪽에 if 문 사용

- 왼쪽에 if 문 쓰는 경우엔 항상 else 까지 써야 함.
- else 가 필요할 때만 왼쪽에쓰자.

    [ i.upper() if len(i) == 1 else i for i in lst ]

ex 5) if else 여러 개. elif 와 같은 효과

    i = [1, -2, 0, 4, 100, -5]
    [ "제로" if v==0 else "양수" if v>0 else "음수" for v in i ]

    ['양수', '음수', '제로', '양수', '양수', '음수']

ex 6) for문 2개 사용

    - 이차원배열 만들기 예제
    [ [i, j] for i in range(2) for j in range(3)]
    # i가 0,1을 반복하며, 각각 j가 0~2를 반복하게 됩니다. 
    # 즉, i가 2번 반복되는 동안, j가 3번 반복되어 총 6가지가 출력됩니다. 
    # 출력되는 i, j에 대해서 리스트나 튜플 집합으로 묶어야 정상 동작합니다.


