1. argument(인수), 피연산자
    int('100')
    => '100' 은 argument(인수), 피연산자라고 한다. 
    
    호출: 함수명([argument]) 시

    이 인수는 int() 함수의 매개변수에 들어가 연산 될 것이다.

2. 
    정의된 함수는 사용하기 위해서는 메모리에 로딩 되어야 한다.
    즉, 실행, import 되어야 한다.

3. 함수의 리턴값은 하나만 가능하다.!!
    처리 결과가 여러개인 경우 자료구조로 묶어서 전달하자!!

4. 가변인자 : 개수가 정해지지 않은 값들을 받아서 처리할 경우 사용

    info(*변수명) 
    호출할때는 전달할 값들(argument)을 나열해서 전달한다.
    그러면 매개변수는 튜플로 받는다.

    def sum_function2(*num_list):
        pass

    sum_function2(1,2,3,4,5)
    sum_function2() ... 어떤 갯수여도 상관없이 처리한다.

5. 가변인자:딕셔너리

    info(**변수명) 
    호출할 때는 keyword argument 형식!! 으로 전달한다.
    그러면 매개변수는 딕셔너리로 받는다.

    def print_info(**info):
        
        for key, value in info.items():

    v1 = print_info(이름='홍길동')  
    v2 = print_info(나이=20, 주소='서울')

6. 가변인자는 한 함수에 종류별(*, **)로 하나씩만 선언가능. 각각 하나씩은 가능함.

[함수는 일급시민객체]

7. 함수 자체가 변수에 할당 될 수 있다.
    your_fn = my_fn
    your_fn('이순신')

    my_fn 함수 자체가 your_fn에 저장 될 수 있는 것.

8. 함수의 매개변수로 다른 함수가 argument 로 전달 되어 사용 될 수 있다.
    def calculator(func):
        num1, num2 = 10, 20
        result = func(num1, num2)

9. 함수가 리턴값으로 함수를 반환할 수 있다.


10. lambda [매개변수] : 리턴값 처리

    y = lambda v: v**2 // 반환값이 y에 담김
    y(10), y(2), y(5)

11. map(각원소들을어떻게처리할지정의한함수, Iterable)
    - 리스트나 자료구조에 담아야 한다.

    list(map(lambda x:x*10, l))
